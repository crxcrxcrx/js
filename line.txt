login.php:
会话启动：

session_start()：启动会话，这样可以在用户成功登录后保存用户会话信息。
请求验证：

检查请求方法是否为POST，并验证必要的POST参数是否存在。
数据库连接：

使用 mysqli_connect 函数连接到数据库。
准备语句和防止SQL注入：

使用 prepare 和 bind_param 方法创建安全的SQL查询，防止SQL注入攻击。
检查用户名和密码：

使用 password_verify 函数验证用户输入的密码是否与数据库中存储的加密密码匹配。
会话管理：

如果密码验证成功，将用户名保存到会话中，并重定向到 index.html。
如果验证失败，显示相应的提示消息并重定向回登录页面。

register.php:
密码确认校验：在进行数据库操作之前，确保用户两次输入的密码一致。

密码加密：使用 password_hash 函数对密码进行加密，PASSWORD_DEFAULT 参数会使用当前最强的加密算法。

数据库连接：使用 mysqli_connect 函数连接到数据库。

准备语句：为了防止 SQL 注入攻击，使用 prepare 和 bind_param 函数来执行查询和插入操作。

检查用户名是否存在：执行一个查询来检查用户名是否已经存在。如果存在，提示用户选择其他用户名。

插入新用户信息：如果用户名不存在，插入新的用户信息，包括加密后的密码。

关闭数据库连接：关闭准备语句和数据库连接。



我们使用 password_hash 来加密密码,并使用 password_verify 来验证密码